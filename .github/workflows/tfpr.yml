name: 'Terraform Planning Workflow'

on: pull_request

defaults:
  run:
    shell: bash

env:
  HAVE_AWSREGION: ${{ secrets.AWSREGION != '' }}
  HAVE_AWSROLE: ${{ secrets.AWSROLE != '' }}

jobs:
  lint:
    name: 'Terraform Linter'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        terraform-versions: [latest]
    steps:
    - name: Checkout

      uses: actions/checkout@v3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ matrix['terraform-versions'] }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -list=true -diff -check -recursive

  check:
    name: 'Plan Pre-Checks'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        terraform-versions: [latest]
    outputs:
      status: ${{ steps.early.conclusion }}
    steps:
    - id: secret
      name: Secrets Check
      if: ${{ env.HAVE_AWSROLE != 'true' && env.HAVE_AWSREGION != 'true' }}
      run: /usr/bin/true

  plan:
    name: 'Terraform Plan'
    runs-on: ${{ matrix.os }}
    needs: check
    if: needs.check.outputs.status == 'success'
    permissions:
      id-token: write
      contents: read
      issues: write
      pull-requests: write
    strategy:
      matrix:
        os: [ubuntu-latest]
        terraform-versions: [latest]
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWSROLE }}
        aws-region: ${{ secrets.AWSREGION }}

    - name: Test AWS Credentials
      run: aws sts get-caller-identity

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ matrix['terraform-versions'] }}

    - name: Terraform Init
      id: init
      run: terraform init -no-color

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    
    - name: Terraform Plan
      id: plan
      continue-on-error: true
      run: terraform plan -input=false -no-color -out=tfplan && terraform show -no-color tfplan

    - name: Publish Terraform Plan Output
      uses: actions/github-script@v6
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Initialization')
          })

          // 2. Prepare format of the comment
          const output = `
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          <details><summary>Init Output</summary>

          \`\`\`\n
          ${{ steps.init.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
          <details><summary>Show Plan</summary>
      
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
      
          </details>
      
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
